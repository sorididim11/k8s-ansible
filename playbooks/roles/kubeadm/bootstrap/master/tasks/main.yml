---


- set_fact:
    pod_network: "{{pod_network[pod_network_plugin]}}"
    user_name: "{{ ansible_user_id }}"
    user_home: "{{ ansible_user_dir }}"

- debug: msg="pod network {{pod_network.name}}, cidr {{pod_network_cidr}}"

- name: Reset kubeadm
  become: yes
  command: kubeadm reset

# It by design does not install a networking solution for you, which means you have to install a third-party CNI-compliant networking solution yourself using kubectl apply
- name: Init master of kubernetes
  become: yes
  command: |
    kubeadm init  
           --kubernetes-version v{{ kube_version }} \ 
           --token={{kube_token}} \
           --apiserver-advertise-address={{inventory_hostname}} \
           --service-cidr {{ service_cidr }} \
           --pod-network-cidr={{pod_network_cidr}}

# to make kubectl work for your non-root user
# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Alternatively, if you are the root user, you could run this:
# export KUBECONFIG=/etc/kubernetes/admin.conf
- block:


  - name: Create kubectl directory for non-root user 
    file: 
      path: "{{user_home}}/.kube"
      state: directory

  - name: copy admin.conf
    become: yes
    copy: 
      src: /etc/kubernetes/admin.conf
      dest: "{{user_home}}/.kube/config"
      owner: "{{user_name}}"
      group: "{{user_name}}"
      remote_src: yes


- name: Create network plugin directory
  become: yes
  file: path="{{pod_network_home}}" state=directory
 

# kube-dns, an internal helper service will not start up before a network is installed. kubeadm only supports Container Network Interface (CNI) based networks 
- name: Generate Pod network config file
  become: yes
  template:
    src: "{{pod_network_plugin}}.yml.j2" 
    dest: "{{pod_network_home}}/{{pod_network_plugin}}.yml"
    mode: 0755


- name: Install Pod network plugin    
  command: "kubectl apply -f {{pod_network_home}}/{{pod_network_plugin}}.yml"

